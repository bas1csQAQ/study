# 读写文件是最常见的IO操作 python中内置的读写文件的函数 用法和c是相互兼容的
# 要注意的是 读写文件的功能是操作系统提供的  而操作系统不允许普通的程序直接操作磁盘 所以其实是请求操作系统打开一个文件 然后通过操作系统提供的接口来进行读写

# 使用内置的open()函数打开文件对象
f = open('./19.IOtest.text', 'r')
# 文件打开成功后 可以使用 read()方法进行读取文件
# python将文件内容读取到内存中 使用str对象表示
print(f.read())
# 文件操作完毕之后 记得使用close()方法关闭文件
f.close()

# 但是由于文件读写时候可能会产生错误 一旦出错之后后面的close()方法就不会执行 会占用操作系统资源 
# 所以为了让程序在任何情况下都可以正确的关闭文件 可以使用 try-finally来实现
try:
    f = open('./19.IOtest.text', 'r')
    print(f.read())
finally:
    if f:
        f.close()
# 但是每次都这么写会很麻烦 所以python引入了with语句来自动实现close()方法
with open('./19.IOtest.text', 'r') as f:
    print(f.read())

# 这么做功能和上面是一样的 但是写起来简单一些 而且还不用手动调用close()方法

# 使用 read()方法可以一次性读取完所有文件内容 但是文件一旦很大就不好用了 比较适用于确定文件不大的情况下
# 可以反复调用 read(size)方法 表示每次读取size个字节的内容  比较适用于不确定文件大小的时候
# 还可以使用 readline()方法 会将所有内容按照行返回list  比较适用于读取配置文件的时候
f = open('./19.IOtest.text', 'r')
for line in f.readlines():
    print(line.strip()) # 把末尾的'\n'删掉
f.close()
# 读取二进制文件需要使用rb模式
f = open('./19.IOtest.text', 'rb')
f.close()
# 对于open()函数来说 默认读取的文件编码为utf-8  如果要读取其他编码的文件 需要加上encoding参数
f = open('./19.IOtest.text', 'r', encoding='gbk')
f.close()
# 但是如果遇到一些编码不规范的文件 就会遇到UnicodeDecodeError 是因为在文件中夹杂了一些非法编码的字符
# 这种情况下可以给open()函数加上errors参数 表示在遇到编码错误之后怎么处理 最简单的方法是直接忽略
f = open('./19.IOtest.text', 'r', encoding='gbk', errors='ignore')
f.close()
# 写文件
# 写文件的前提是在使用open()函数的时候 传入w标识符或者 wb标识符 表示写文本文件或者写二进制文件
f = open('./19.IOtest.text', 'w')
f.write('Hello, world!')
f.close()
# 可以反复的调用write()方法来写入文件 但是必须要使用f.close()关闭文件 
# 写文件时，操作系统往往不会立刻把数据写入磁盘，而是放到内存缓存起来，空闲的时候再慢慢写入。只有调用close()方法时，操作系统才保证把没有写入的数据全部写入磁盘。忘记调用close()的后果是数据可能只写了一部分到磁盘，剩下的丢失了
# 所以还是使用with语句方便些
with open('./19.IOtest.text', 'w') as f:
    f.write('Hello, world!')

# 如果要写入特定编码的文本文件 要在open()函数中传入 encoding参数 

# 但是可以发现一个问题 如果文件中已经有内容了 再写入的时候就会覆盖原有内容 
# 使用a模式以追加模式将内容追加到文件末尾
with open('./19.IOtest.text', 'a') as f:
    f.write('Hello, world!123456')


# tell 方法获取当前文件读取指针的位置
# seek 方法，用于移动文件读写指针到指定位置,有两个参数，第一个offset: 偏移量，需要向前或向后的字节数，正为向后，负为向前；第二个whence: 可选值，默认为0，表示文件开头，1表示相对于当前的位置，2表示文件末尾
# 用seek方法时，需注意，如果你打开的文件没有用'b'的方式打开，则offset无法使用负值


# open函数本质上，是先查找路径中是否有此文件，如果有的话，直接打开。

# 如果没有的话，创建一个文件，再打开（所以可以用open函数在指定路径中创建一个文件）

# 打开模式：

# 'r'            (默认) 以只读模式打开

# 'w'           以写入模式打开（写入的内容会覆盖已存在的文件内容）

# 'x'            如果文件已存在，会出现一个错误：FileExistsError     

# 'a'            以写入模式打开，把写入的内容追加到末尾

# 'b'            以二进制模式打开

# 't'             （默认）以文本模式打开

# '+'             可读写模式（可与其他模式一起使用）

# 'U'            支持通用换行符
